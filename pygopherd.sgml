<!DOCTYPE reference PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
  <!ENTITY PyGopherd "<application>PyGopherd</application>">
  <!ENTITY OfflineIMAP "<application>OfflineIMAP</application>">
]>
<!--      "file:///usr/share/sgml/docbook/dtd/xml/4.2/docbookx.dtd"> -->

<reference id="pygopherd">
  <title>PyGopherd Manual</title>

  <refentry>
    <refentryinfo>
      <address><email>jgoerzen@complete.org</email></address>
      <author><firstname>John</firstname><surname>Goerzen</surname></author>
      <date> $Date: 2003-08-24 20:38:33 -0500 (Sun, 24 Aug 2003) $ </date>
    </refentryinfo>

    <refmeta>
      <refentrytitle>pygopherd</refentrytitle>
      <manvolnum>8</manvolnum>
      <refmiscinfo>John Goerzen</refmiscinfo>
    </refmeta>

    <refnamediv>
      <refname>PyGopherd</refname>
      <refpurpose>Multiprotocol Information Server</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
      <cmdsynopsis>
	<command>pygopherd</command>
	<arg><replaceable>configfile</replaceable></arg>
      </cmdsynopsis>
    </refsynopsisdiv>

    <refsect1 id="description">
      <title>Description</title>

      <para>
	Welcome to &PyGopherd;.  In a nutshell, &PyGopherd;
	is a modern dynamic
	multi-protocol hierarchical information server with a pluggable
	modularized extension system, 
	full flexible caching, virtual files and
	folders, and autodetection of file types -- all with support for
	standardized yet extensible per-document metadata. Whew! Read on for
	information on this what all these buzzwords mean.
      </para>

      <refsect2 id="description.features">
	<title>Features</title>
	<para>
	  Here are some of &PyGopherd;'s features:
	</para>
	
	<itemizedlist>
	  <listitem><para>Provides built-in support for multiple protocols:
	      HTTP (Web), Gopher+, Gopher (RFC1436), Enhanced Gopher0,
	      and WAP (mobile phones).  Protocols can be enabled or
	      disabled as desired.
	    </para>
	  </listitem>
	  
	  <listitem><para>Provides protocol autodetection.  That is,
	      &PyGopherd; can listen for all the above protocols
	      <emphasis>on a single port</emphasis> and will
	      automatically respond using the protocol it detects the
	      client is using.  Practical effects of this are that you
	      can, for instance, give out a single URL and have it
	      viewable normally on desktop Web browsers and in WAP
	      mode on mobile phones -- and appropriately in various
	      Gopher browsers.
	    </para>
	  </listitem>

	  <listitem><para>Metadata and site links can be entered in a
	      variety of formats, including full UMN dotfile metadata
	      formats as well as Bucktooth gophermap files.  Moreover,
	      gophermap files are not limited to Gopher protocols, and
	      can be used for all protocols.
	    </para>
	  </listitem>

	  <listitem><para>Support for inter-protocol linking (linking
	  from Gopher sites to web sites)</para>
	  </listitem>

	  <listitem><para>Virtual folder system lets you serve up
	  anything as if it were regular files and directories.
	  PyGopherd comes with the following virtual folder systems
	      built in:</para>
	    <itemizedlist>
	      <listitem><para>Can present any Unix MBOX, MMDF box, MH
		  directory, Maildir directory, or Babyl mailbox as a
		  virtual folder, the contents of which are the
		  messages in the mailbox.
		</para>
	      </listitem>
	      <listitem><para>Can use a configurable separator to
		  split a file into multiple parts, the first line of each
		  becoming the name for the virtual folder.</para>
	      </listitem>
	      <listitem><para>Can peek inside a ZIP file and serve it
	      up as first-class site citizens -- metadata can even be
	      stored in the ZIP files.
		</para>
	      </listitem>
	      <listitem><para>Can serve up the contents of a dictd
	      server as a filesystem.
		</para>
	      </listitem>
	    </itemizedlist>

	  <listitem><para>
	      Modular, extensible design: you can use PyGopherd's own
	      PYG extension format, or UMN- or Bucktooth-style
	      executables.
	    </para>
	  </listitem>

	  <listitem><para>
	      Runs on any platform supported by Python 2.2 or 2.3.
	      This includes virtually every past and current flavor of
	      Unix (Linux, *BSD, Solaris, SunOS), Windows, MacOS 9.x
	      and X, and more.  Some features may not be available on
	      non-Unix platforms.
	    </para>
	  </listitem>

	  <listitem><para>Runs on any platform supported by Java 1.1
	  via the Jython Python implementation.</para>
	  </listitem>

	  <listitem><para>Tunable server types via configuration
	  directive -- forking or threading.</para>
	  </listitem>

	  <listitem><para>Secure design with support for chrooted execution.</para>
	  </listitem>

	  <listitem><para>Feature-complete, full implementations of:
	  Gopher0 (RFC1435), Gopher+, HTTP, and WAP.</para>
	  </listitem>

	  <listitem><para>Support for automatically finding the titles
	  of HTML documents for presentation in a directory.</para>
	  </listitem>
	      
	  <listitem><para>Versatile configuration file format is both
	  extensible and nicely complementary of the module system.</para>
	  </listitem>

	  <listitem><para>Protocol-independant, handler-dependant
	  caching.  This increases performance by letting handlers
	  cache dynamically-generated information -- currently used by
	  the directory handlers.  This can improve performance of
	  directories by several orders of magnitude.  Because this is
	  a handler cache only, all protococls share the single
	  cache.  Since the processing time for the protocols is
	  negligable, this works out very well.</para>
	  </listitem>

	  <listitem><para>Autosensing of MIME types and gopher0 item
	  types.  Both are completely configurable.  MIME type
	  detection is done using a standard mime.types file, and
	  gopher0 types are calculated by using a configurable
	  regexp-based MIME-to-gophertype map.</para>
	  </listitem>

	  <listitem><para>Heavy support of regular expressions in configuration.</para>
	  </listitem>

	  <listitem><para>ProtocolMultiplexer and HandlerMultiplexer
	  let you choose only those protocols and handlers that you
	  wish your server to support and the order in which they are
	  tried when a request comes in.
	    </para>
	  </listitem>
	 
	  <listitem><para>Full logging via syslog.</para>
	  </listitem>
	</itemizedlist>
      </refsect2>


      <refsect2 id="description.aboutgopher">
	<title>About Gopher</title>
	<para>
	  &PyGopherd; started life as a server for the Gopher Internet
	  protocol. With Gopher, you can mount a filesystem (viewing files and
	  folders as if they were local),
	  browse Gopherspace with a web browser,
	  download files, and be interactive with searching.
	</para>
	
	<para>
	  But this is only part of the story. The world of Gopher is more
	  expansive than this. There are two major gopher protocols: Gopher0
	  (also known as RFC1436) and Gopher+. Gopher0 is a small, simple,
	  lightweight protocol that is very functional yet also extremely easy
	  to implement. Gopher0 clients can be easily places in small embedded
	  devices or in massive environments like a modern web browser.
	</para>
	
	<para>
	  Gopher+ is based on Gopher0 but extends it by providing document
	  metadata such as file size and MIME type. Gopher+ allows all sorts of
	  neat features, such as configurable metadata (serving up a bunch of
	  photos? Add a Subject field to your metadata to let
	  a customized photo
	  browser display who is pictured) and multiple
	  views of a file (let the
	  user select to view your photos as PNG or JPEG).
	</para>
      </refsect2>
    </refsect1>

    <refsect1 id="quickstart">
      <title>Quick Start</title>
      <para>
	If you have already installed &PyGopherd; system-wide, or your
	administrator has done that for you, your task for setting up
	&PyGopherd; for the first time is quite simple.  You just need
	to set up your configuration file, make your folder directory,
	and run it!
      </para>
      
      <para>
	You can quickly set up your configuration file.  The
	distribution includes two files of interest:
	<filename>conf/pygopherd.conf</filename> and
	<filename>conf/mime.types</filename>.  Debian users will find
	the configuration file pre-installed in
	<filename>/etc/pygopherd/pygopherd.conf</filename> and the
	<filename>mime.types</filename> file provided by the system
	already.
      </para>

      <para>
	Open up <filename>pygopherd.conf</filename> in your editor and
	adjust to suit.  The file is heavily commented and you can
	refer to it for detailed information.  Some settings to take a
	look at include: <property>detach</property>,
	<property>pidfile</property>, <property>port</property>, 
	<property>usechroot</property>, <property>setuid</property>,
	<property>setgid</property>, and <property>root</property>.
	These may or may not work at their defaults for you.  The
	remaining ones should be fine for a basic setup.
      </para>

      <para>
	Invoke &PyGopherd; with <command>pygopherd
	  path/to/configfile</command> (or
	<command>/etc/init.d/pygopherd start</command> on Debian).
	Place some files in the location specified by the
	<property>root</property> directive in the config file and
	you're ready to run!
      </para>
    </refsect1>
    
    <refsect1 id="installation">
      <title>Installation</title>
      <para>
	If  you  are  reading this document via the "man" command, it is likely
	that you have no installation tasks to perform; your system administra-
	tor  has already installed &PyGopherd;.  If you need to install it yourself, you
	have three options: a system-wide installation with Debian, system-wide
	installation  with  other systems, and a single-user installation.  You
	can    download    the    latest    version    of    PyGopherd
	from
	<ulink
	url="http://quux.org/devel/gopher/pygopherd/"></ulink>
      </para>

      <refsect2 id="installation.debian">
	<title>Debian System-Wide Installation</title>
	<para>
	  If you are tracking Debian unstable, you may install
	  &PyGopherd; by simply running this command as root:
	</para>
	
	<para>
	  <command>apt-get install pygopherd</command>
	</para>
	
	<para>
	  If you are not tracking Debian unstable, download the .deb
	  package from the &PyGopherd; website and then run
	  <command>dpkg -i</command> to install the downloaded
	  package.  Then, skip to the configuration section below.
	  You will use <command>/etc/init.d/pygopherd start</command>
	  to start the program.
	</para>

      </refsect2>

      <refsect2 id="installation.other">
	<title>Other System-Wide Installation</title>
	<para>
	  Download the tar.gz version of the package from the website.  Make
	  sure you have Python 2.2 or above installed; if now, download and
	  install it from <ulink
	    url="http://www.python.org/"></ulink>.  Then run these
	  commands:
	</para>

	<programlisting>
	  <command>tar -zxvf pygopherd-x.y.z.tar.gz</command>
	  <command>cd pygopherd-x.y.z</command>
	  <command>python2.2 setup.py</command>
	</programlisting>

	<para>
	  Some systems will use <command>python</command> or
	  <command>python2.3</command> in place of
	  <command>python2.2</command>.
	</para>
	<para>
	  Next, proceed to configuration.  Make sure that the
	  <filename>/etc/pygopherd/pygopherd.conf</filename> file
	  names valid users (<property>setuid</property> and
	  <property>setgid</property> options) and a valid document
	  root (<property>root</property> option).
	</para>

	<para>
	  You will type <filename>pygopherd</filename> to invoke the
	  program.
	</para>
      </refsect2>

      <refsect2 id="installation.single">
	<title>Single-Account Installation</title>
	<para>
	  Download the tar.gz version of the package from the website.  Make
	  sure you have Python 2.2 or above installed; if now, download and
	  install it from <ulink
	    url="http://www.python.org/"></ulink>.  Then run these
	  commands:
	</para>
	<programlisting>
	  <command>tar -zxvf pygopherd-z.y.z.tar.gz</command>
	  <command>cd pygopherd-x.y.z</command>
	</programlisting>

	<para>
	  Modify <filename>conf/pygopherd.conf</filename> as follows:
	</para>

	<itemizedlist>
	  <listitem><para>Set <property>usechroot = no</property></para>
	  </listitem>

	  <listitem><para>Comment out (add a # sign to the start of
	      the line) the <property>pidfile</property>,
	      <property>setuid</property>, and
	      <property>setgid</property> lines.</para>
	  </listitem>

	  <listitem><para>Set <property>root</property> to osomething appropriate.</para>
	  </listitem>

	  <listitem><para>Set <property>port</property> to a number
	      greater than 1024.</para>
	  </listitem>
	</itemizedlist>
	<para>
	  When you want to run &PyGopherd;, you will issue the
	  <command>cd</command> command as above and then type
	  <command>PYTHONPATH=. bin/pygopherd</command>.  There is no
	  installation step necessary.
	</para>
      </refsect2>
    </refsect1>

    <refsect1 id="configuration">
      <title>Configuration</title>
      <para>
	&PyGopherd; is regulated by a configuratoin file normally
	stored in <filename>/etc/pygopherd/pygopherd.conf</filename>.
	You can specify an alternate configuration file on the command
	line.  The &PyGopherd; distribution ships
	with a sample <filename>pygopherd.conf</filename> file that
	thoroughly documents the configuration file options and
	settings.
      </para>
    </refsect1>

    <refsect1 id="options">
      <title>Options</title>
      <para>
	All &PyGopherd; configuratoin is done via the configuration
	file.  Therefore, the program has only one command-line
	option:
      </para>

      <variablelist>
	<varlistentry><term><replaceable>configfile</replaceable></term>
	  <listitem><para>This option argument specifies the location
	      of the configuration file that &PyGopherd; is to use.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect1>

    <refsect1 id="handlers">
      <title>Handlers</title>
      <para>
	&PyGopherd; defines several handlers which are responsible for
	finding data on your server and presenting it to the user.  The
	handlers are used to generate things like links to other documents and
	directory listings.  They are also responsible for serving up regular
	files and even virtual folders.
      </para>

      <para>
	Handlers are specified with the <property>handlers</property>
	option in <filename>pygopherd.conf</filename>.  This option is
	a list of handlers to use.  For each request that arrives,
	&PyGopherd; will ask each handler in
	turn whether or not it can handle the request, and will handle the
	request according to the first handler that is capable of doing so.
	If no handlers can handle the request, a file not found error is
	generated.  See the example configuration file for an example.
      </para>

      <para>
	The remaining parts of this section describe the different
	handlers that ship with &PyGopherd;.
      </para>

      <variablelist>
	<varlistentry><term>dir.DirHandler</term>
	  <listitem><para>
	      This handler is a basic one that generates menus based
	      on the contents of a directory.  It is used for
	      directories that contain neither a
	      <filename>gophermap</filename> file nor UMN-style links
	      files, or situations where you have no need for either
	      of those.</para>
	    <para>
	      This handler simply
	      reads the contents of your on-disk directory, determines the
	      appropriate types of each file, and sends the result to the client.
	      The descriptions of each item are usually set to the filename, but the
	      <property>html.HTMLFileTitleHandler</property> may
	      override that.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry><term>gophermap.BuckGophermapHandler</term>
	  <listitem><para>
	      This handler is used to generate directory listings
	      based on <filename>gophermap</filename> files.  It will
	      not read the directory on-disk, instead serving content
	      from the <filename>gophermap</filename> file only.
	      Gophermaps are useful if you want to present a directory
	      in which the files do not frequently change and there is
	      general information to present.  Overall, if you only
	      wish to present information particular to certain files,
	      you should consider using the abstract feature of
	      UMN.UMNDirHandler.
	    </para>
	    <para>
	      The <filename>gophermap</filename> files contain two
	      types of lines, which are described here using the same
	      convention normally used for command line arguments.  In
	      this section, the symbol \t will be used to indicate a
	      tab character, Control-I.
	    </para>
	    <cmdsynopsis>
	      <arg choice="Plain"><replaceable>full line of informational
		text</replaceable></arg>
	    </cmdsynopsis>
	    <cmdsynopsis>
	      <arg choice="Plain"><replaceable>gophertypeDESCRIPTION</replaceable></arg><arg>\t<replaceable>selector</replaceable><arg>\t<replaceable>host</replaceable><arg>\t<replaceable>port</replaceable></arg></arg></arg>
	    </cmdsynopsis>
	    <!-- START HERE -->
	    <para>
	      Foo
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </refsect1>

    <refsect1>
      <title>Examples</title>
      <para>Here are some example configurations for various situations.
	Please e-mail any other examples you have that may be useful to
	me.
      </para>

      <refsect2>
	<title>Multiple Accounts with Mutt</title>
	<para>
	  This example shows you how to set up &OfflineIMAP; to
	  synchronize multiple accounts with the mutt mail reader.
	</para>
	<para>
	  Start by creating a directory to hold your folders by running
	  <command>mkdir ~/Mail</command>.  Then, in your
	  <filename>~/.offlineimaprc</filename>, specify:
	</para>
	<programlisting>accounts = Personal, Work</programlisting>
	<para>
	  Make sure that you have both an
	  <property>[Account Personal]</property>
	  and an <property>[Account Work]</property> section.  The
	  local repository for each account must have different
	  <property>localfolder</> path names.
	  Also, make sure
	  to enable <property>[mbnames]</property>.
	</para>
	<para>
	  In each local repository section, write something like this:
	</para>
	<programlisting>localfolders = ~/Mail/Personal</programlisting>
	<para>
	  Finally, add these lines to your <filename>~/.muttrc</filename>:
	</para>
	<programlisting>source ~/path-to-mbnames-muttrc-mailboxes
folder-hook Personal set from="youremail@personal.com"
folder-hook Work set from="youremail@work.com"
set mbox_type=Maildir
set folder=$HOME/Mail
spoolfile=+Personal/INBOX</programlisting>
	<para>
	  That's it!
	</para>
      </refsect2>

      <refsect2>
	<title>UW-IMAPD and References</title>
	<para>Some users with a UW-IMAPD server need to use &OfflineIMAP;'s
	  "reference" feature to get at their mailboxes, specifying a reference
	  of "~/Mail" or "#mh/" depending on the configuration.  The below
	  configuration from (originally from docwhat@gerf.org)
	  shows using a <property>reference</property> of Mail, a <property>nametrans</property>
	  that strips
	  the leading Mail/ off incoming folder names, and a
	  <property>folderfilter</property> that
	  limits the folders synced to just three.
	</para>
	<programlisting>[Account Gerf]
localrepository = GerfLocal
remoterepository = GerfRemote

[Repository GerfLocal]
type = Maildir
localfolders = ~/Mail

[Repository GerfRemote]
type = IMAP
remotehost = gerf.org
ssl = yes
remoteuser = docwhat
reference = Mail
# Trims off the preceeding Mail on all the folder names.
nametrans = lambda foldername: \
            re.sub('^Mail/', '', foldername)
# Yeah, you have to mention the Mail dir, even though it
# would seem intuitive that reference would trim it.
folderfilter = lambda foldername: foldername in [
      'Mail/INBOX',
      'Mail/list/zaurus-general',
      'Mail/list/zaurus-dev',
      ]
maxconnections = 1
holdconnectionopen = no</programlisting>
      </refsect2>

      <refsect2>
	<title>pythonfile Configuration File Option</title>
	<para>You can have &OfflineIMAP;
	  load up a Python file before evaluating the
	  configuration file options that are Python expressions.  This example
	  is based on one supplied by Tommi Virtanen for this feature.
	</para>
	<para>
	  In <filename>~/.offlineimap.rc</filename>, he adds these options:
	</para>
	<programlisting>[general]
pythonfile=~/.offlineimap.py
[Repository foo]
foldersort=mycmp</programlisting>
	<para>
	  Then, the <filename>~/.offlineimap.py</filename> file will
	  contain:
	</para>
	<programlisting>prioritized = ['INBOX', 'personal', 'announce', 'list']

def mycmp(x, y):
   for prefix in prioritized:
       if x.startswith(prefix):
           return -1
       elif y.startswith(prefix):
           return +1
   return cmp(x, y)

def test_mycmp():
   import os, os.path
   folders=os.listdir(os.path.expanduser('~/data/mail/tv@hq.yok.utu.fi'))
   folders.sort(mycmp)
   print folders</programlisting>
	<para>
	  This code snippet illustrates how the <property>foldersort</property>
	  option can be customized with a Python function from the
	  <property>pythonfile</property> to always synchronize certain
	  folders first.
	</para>
      </refsect2>
    </refsect1>
      
    <refsect1>
      <title>Errors</title>
      <para>
	If you get one of some frequently-encountered or confusing errors,
	please check this section.
      </para>
      
      <refsect2>
	<title>UID validity problem for folder</title>
	<para>IMAP servers use a unique ID (UID) to refer to a specific message.
	  This number is guaranteed to be unique to a particular message
	  <emphasis>forever</emphasis>.
	  No other message in the same folder will ever get the same
	  UID.  UIDs are an integral part of &OfflineIMAP;'s synchronization
	  scheme; they are used to match up messages on your computer to
	  messages on the server.
	</para>

	<para>
	  Sometimes, the UIDs on the server might get reset.  Usually this will
	  happen if you delete and then recreate a folder.  When you create a
	  folder, the server will often start the UID back from 1.  But
	  &OfflineIMAP; might still have the UIDs from the previous folder by the
	  same name stored.  &OfflineIMAP; will detect this condition and skip the
	  folder.  This is GOOD, because it prevents data loss.
	</para>

	<para>
	  You can fix it by removing your local folder and cache data.  For
	  instance, if your folders are under <filename>~/Folders</filename>
	  and the folder with the problem is INBOX, you'd type this:
	</para>

	<programlisting>rm -r ~/Folders/INBOX
rm -r ~/.offlineimap/Account-<replaceable>AccountName</>
rm -r ~/.offlineimap/Repository-<replaceable>RepositoryName</></programlisting>

	<para>
	  (Of course, replace AccountName and RepositoryName 
	  with the names as specified
	  in <filename>~/.offlineimaprc</filename>).
	</para>

	<para>Next time you run &OfflineIMAP;, it will re-download
	  the folder with the
	  new UIDs.  Note that the procedure specified above will lose any local
	  changes made to the folder.
	</para>

	<para>
	  Some IMAP servers are broken and do not support UIDs properly.  If you
	  continue to get this error for all your folders even after performing
	  the above procedure, it is likely that your IMAP server falls into
	  this category.  &OfflineIMAP; is incompatible with such servers.
	  Using &OfflineIMAP; with them will not destroy any mail, but at the same time,
	  it will not actually synchronize it either.  (&OfflineIMAP; will detect
	  this condition and abort prior to synchronization.)
	</para>
	<para>
	  This question comes up frequently on the
	  <ulink
	  url="http://lists.complete.org/offlineimap@complete.org/">&OfflineIMAP;
	  mailing list</ulink>.  You can find a
	  <ulink
	  url="http://lists.complete.org/offlineimap@complete.org/2003/04/msg00012.html.gz">detailed
	  discussion</ulink> of the problem there.
	</para>
      </refsect2>
    </refsect1>
    <refsect1>
      <title>Other Frequently Asked Questions</title>
      <para>There are some other FAQs that might not fit into another section
	of the document, so they are discussed here.
      </para>

      <variablelist>
	<varlistentry><term>What platforms does &OfflineIMAP; run on?</term>
	  <listitem><para>
	    It should run on most platforms supported by Python, which are quite a
	    few.
	  </para></listitem>
        </varlistentry>

	<varlistentry><term>I'm using Mutt.  Other IMAP sync programs require me to use "set maildir_trash=yes".  Do I need to do that with &OfflineIMAP;?</term>
	  <listitem><para>
	    No.  &OfflineIMAP; is smart enough to figure out message deletion without this extra
	    crutch.  You'll get the best results if you don't use this setting, in
	    fact.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>I've upgraded and now &OfflineIMAP;
	crashes when I start it up!  Why?</term>
	  <listitem><para>You need to upgrade your configuration
	file.  See <xref linkend="upgrading.4.0"> at the end of this
	      manual.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry><term>How do I specify the names of my folders?</term>
  	  <listitem><para>
	    You do not need to.  &OfflineIMAP; is smart
	    enough to automatically figure out what folders are present
	    on the IMAP server and synchronize them.  You can use the
	    <property>folderfilter</property> and <property>foldertrans</property>
	    configuration file options to request certain folders and rename them
	    as they come in if you like.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>How can I prevent certain folders from being synced?</term>
	  <listitem><para>
	    Use the <property>folderfilter</property> option in the configuration file.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>How can I add or delete a folder?</term>
	  <listitem><para>
	    &OfflineIMAP; does not currently provide this feature, but if you create a new
	    folder on the IMAP server, it will be created locally automatically.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>Are there any other warnings that I should be aware of?</term>
	  <listitem><para>
	    Yes; see the Notes section below.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>What is the mailbox name recorder (mbnames) for?</term>
	  <listitem><para>Some mail readers, such as Mutt, are not capable
	    of automatically determining the names of your mailboxes.
	    &OfflineIMAP; can help these programs by writing the names
	    of the folders ni a format you specify.  See the example
	    <filename>offlineimap.conf</filename> for details.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>Can I synchronize multiple accounts with &OfflineIMAP?</term>
	  <listitem><para>Sure.  Just name them all in the
	    <property>accounts</property> line in the <property>general</property>
	    section of the configuration file, and add a per-account section
	    for each one.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>Does &OfflineIMAP; support POP?</term>
	  <listitem><para>No.  POP is not robust enough to do a completely reliable
	    multi-machine synchronization like &OfflineIMAP; can do.  &OfflineIMAP;
	    will not support it.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>Does &OfflineIMAP; support mailbox formats other than Maildir?</term>
	  <listitem><para>Not at present.  There is no technical reason not to; just no
	    demand yet.  Maildir is a superior format anyway.
	      However, &OfflineIMAP; can sync between two IMAP
	  servers, and some IMAP servers support other formats.  You
	  could install an IMAP server on your local machine and have
	  &OfflineIMAP sync to that.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>[technical] Why are your Maildir message filenames so huge?</term>
	  <listitem><para>&OfflineIMAP; has two relevant principles: 1) never modifying your
	    messages in any way and 2) ensuring 100% reliable synchronizations.
	    In order to do a reliable sync, &OfflineIMAP;
	    must have a way to
	    uniquely identify each e-mail.  Three pieces of information are
	    required to do this: your account name, the folder name, and the
	    message UID.  The account name can be calculated from the path in
	    which your messages are.  The folder name can usually be as well, BUT
	    some mail clients move messages between folders by simply moving the
	    file, leaving the name intact.
	  </para>
	  <para>
	    So, &OfflineIMAP; must store both a UID folder ID.  The folder ID is
	    necessary so &OfflineIMAP; can detect a message moved to a different
	    folder.  &OfflineIMAP; stores the UID (U= number) and an md5sum of the
	    foldername (FMD5= number) to facilitate this.
	  </para></listitem>
	</varlistentry>

	<varlistentry><term>What is the speed of &OfflineIMAP;'s sync?</term>
	  <listitem><para>OfflineIMAP
	    versions 2.0 and above contain a multithreaded system.  A good way to
	    experiment is by setting <property>maxsyncaccounts</property> to 3 and <property>maxconnections</property> to 3
	    in each account clause.
	  </para>
	  <para>This lets OfflineIMAP open up multiple connections simultaneously.
	    That will let it process multiple folders and messages at once.  In
	    most cases, this will increase performance of the sync.
	  </para>
	  <para>Don't set the number too high.  If you do that, things might actually
	    slow down as your link gets saturated.  Also, too many connections can
	    cause mail servers to have excessive load.  Administrators might take
	    unkindly to this, and the server might bog down.  There are many
	    variables in the optimal setting; experimentation may help.
	  </para>
	  <para>An informal benchmark yields these results for my setup:
	  </para>
	  <itemizedlist>
	    <listitem><para>10 minutes with MacOS X Mail.app "manual cache"
	      </para></listitem>
	    <listitem><para>5 minutes with GNUS agent sync</para></listitem>
	    <listitem><para>20 seconds with OfflineIMAP 1.x</para></listitem>
	    <listitem><para>9 seconds with OfflineIMAP 2.x</para></listitem>
	    <listitem><para>3 seconds with OfflineIMAP 3.x "cold start"</para></listitem>
	    <listitem><para>2 seconds with OfflineIMAP 3.x "held connection"</para></listitem>
	  </itemizedlist>
	</listitem></varlistentry>
      </variablelist>
    </refsect1>

    <refsect1>
      <title>Conforming To</title>
      <itemizedlist>
	<listitem><para>Internet Message Access Protocol version 4rev1 (IMAP 4rev1) as
	  specified in RFC2060 and RFC3501</para></listitem>
	<listitem><para>CRAM-MD5 as specified in RFC2195</para></listitem>
	<listitem><para>Maildir as specified in
	  <ulink url="http://www.qmail.org/qmail-manual-html/man5/maildir.html">the Maildir manpage</ulink> and
	  <ulink url="http://cr.yp.to/proto/maildir.html">the qmail website</ulink>.</para></listitem>
	<listitem><para>Standard Python 2.2.1 as implemented on POSIX-compliant systems.</para></listitem>
      </itemizedlist>
    </refsect1>

    <refsect1>
      <title>Notes</title>
      <refsect2>
	<title>Deleting Local Folders</title>
	<para>&OfflineIMAP; does a two-way synchronization.  That is, if you
	  make a change to the mail on the server, it will be propogated to your
	  local copy, and vise-versa.  Some people might think that it would be
	  wise to just delete all their local mail folders periodically.  If you
	  do this with &OfflineIMAP;, remember to also remove your local status
	  cache (<filename>~/.offlineimap</filename> by default).  Otherwise, &OfflineIMAP; will take
	  this as an intentional deletion of many messages and will interpret
	  your action as requesting them to be deleted from the server as well.
	  (If you don't understand this, don't worry; you probably won't
	  encounter this situation)
	</para>
      </refsect2>

      <refsect2>
	<title>Multiple Instances</title>
	<para>&OfflineIMAP; is not designed to have several instances (for instance, a cron job and an interactive invocation) run over the same
	  mailbox simultaneously.  It will perform a check on startup and
	  abort if another &OfflineIMAP; is already running.  If you need
	  to schedule synchronizations, please use the
	  <property>autorefresh</property> settings rather than cron.
	  Alternatively, you can set a separate <property>metadata</property>
	  directory for each instance.
	</para>
      </refsect2>

      <refsect2>
	<title>Copying Messages Between Folders</title>
	<para>
	  Normally, when you copy a message between folders or add a new message
	  to a folder locally, &OfflineIMAP;
	  will just do the right thing.  However, sometimes this can be tricky
	  -- if your IMAP server does not provide the SEARCH command, or does
	  not return something useful, &OfflineIMAP;
	  cannot determine the new UID of the message.  So, in these rare
	  instances, OfflineIMAP will upload the message to the IMAP server and
	  delete it from your local folder.  Then, on your next sync, the
	  message will be re-downloaded with the proper UID.
	  &OfflineIMAP; makes sure that the message was properly uploaded before deleting it,
	  so there should be no risk of data loss.
	</para>
      </refsect2>

      <refsect2>
	<title>Use with Evolution</title>
	<para>&OfflineIMAP; can work with Evolution.  To do so, first configure
	  your &OfflineIMAP; account to have
	  <option>sep = /</option> in its configuration.  Then, configure
	  Evolution with the
	  "Maildir-format mail directories" server type.  For the path, you will need to
	  specify the name of the top-level folder
	  <emphasis>inside</emphasis> your &OfflineIMAP; storage location.
	  You're now set!
	</para>
      </refsect2>

      <refsect2>
	<title>Use with KMail</title>
	<para>At this time, I believe that &OfflineIMAP; with Maildirs
	  is not compatible
	  with KMail.  KMail cannot work in any mode other than to move
	  all messages out of all folders immediately, which (besides being annoying
	  and fundamentally broken) is incompatible with
	&OfflineIMAP;.
	</para>
	<para>
	  However, I have made KMail version 3 work well with
	  &OfflineIMAP; by installing an IMAP server on my local
	  machine, having &OfflineIMAP; sync to that, and pointing
	  KMail at the same server.
	</para>
      </refsect2>

      <refsect2>
	<title>Mailing List</title>
	<para>There is an OfflineIMAP mailing list available.
	  To subscribe, send the text "Subscribe" in the subject of a mail to
	  offlineimap-request@complete.org.  To post, send the message to
	  offlineimap@complete.org.  Archives are available at
	  <ulink url="http://lists.complete.org/offlineimap@complete.org/"></>.
	</para>
      </refsect2>

      <refsect2>
	<title>Bugs</title>
	<para>Reports of bugs should be sent via e-mail to the
	  &OfflineIMAP; bug-tracking system (BTS) at
	  offlineimap@bugs.complete.org or submitted online using
	  the <ulink url="http://bugs.complete.org/">web interface</ulink>.
	</para>
	<para>
	  The Web site also lists all current bugs, where you can check their
	  status or contribute to fixing them.
	</para>
      </refsect2>
    </refsect1>

    <refsect1 id="upgrading.4.0">
      <title>Upgrading to 4.0</title>
      <para>
	If you are upgrading from a version of &OfflineIMAP; prior to
	3.99.12, you will find that you will get errors when
	&OfflineIMAP; starts up (relating to ConfigParser or
	AccountHashGenerator) and the
	configuration file.  This is because the config file format
	had to change to accomodate new features in 4.0.  Fortunately,
	it's not difficult to adjust it to suit.
      </para>
      <para>
	First thing you need to do is stop any running &OfflineIMAP;
	instance, making sure first that it's synced all your mail.
	Then, modify your
	<filename>~/.offlineimaprc</filename> file.  You'll need to
	split up each account section (make sure that it now starts
	with "Account ") into two Repository sections (one for the
	local side and another for the remote side.)  See the files
	<filename>offlineimap.conf.minimal</filename> and
	<filename>offlineimap.conf</filename> in the distribution if
	you need more assistance.
      </para>
      <para>
	&OfflineIMAP;'s status directory area has also changed.
	Therefore, you should delete everything in ~/.offlineimap as
	well as your local mail folders.
      </para>
      <para>
	When you start up &OfflineIMAP; 4.0, it will re-download all
	your mail from the server and then you can continue using it
	like normal.
      </para>
    </refsect1>
	

    <refsect1>
      <title>Copyright</title>
      <para>OfflineIMAP, and this manual, are Copyright &copy; 2002, 2003 John Goerzen.</para>

      <para>
	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.
      </para>

      <para>
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
      </para>

      <para>
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA</para>

      <para>imaplib.py comes from the Python dev tree and is licensed under
	the GPL-compatible PSF license as stated in the file
	<filename>COPYRIGHT</filename> in the &OfflineIMAP;
         distribution.
      </para>
    </refsect1>

    <refsect1>
      <title>Author</title>
      <para>&OfflineIMAP;, its libraries, documentation, and all included files, except where
	noted, was written by John Goerzen <email>jgoerzen@complete.org</email> and
	copyright is held as stated in the COPYRIGHT section.
      </para>

      <para>
	&OfflineIMAP; may be downloaded, and information found, from its
	homepage via either <ulink url="gopher://quux.org/1/devel/offlineimap">Gopher</ulink>
	or <ulink url="http://quux.org/devel/offlineimap">HTTP</ulink>.
      </para>

      <para>
	&OfflineIMAP; may also be downloaded using Subversion.  Additionally,
	the distributed tar.gz may be updated with a simple "svn update"
	command; it is ready to go.  For information on getting OfflineIMAP
	with Subversion, please visit the
	<ulink url="http://svn.complete.org/">complete.org Subversion page</ulink>.
      </para>

    </refsect1>

    <refsect1>
      <title>See Also</title>
      <para><application>mutt</application>(1),
	<application>python</application>(1)
      </para>
    </refsect1>

    <refsect1>
      <title>History</title>
      <para>
	Detailed history may be found in the file ChangeLog in the
	&OfflineIMAP; distribution.  Feature and bug histories may be
	found in the file debian/changelog which, despite its name, is
	not really Debian-specific.  This section provides a large
	overview.
      </para>
      <para>
	Development on &OfflineIMAP; began on June 18, 2002.  Version
	1.0.0 was released three days later on June 21, 2002.  Point
	releases followed, including speed optimizations and some
	compatibility fixes.
      </para>
      <para>Version 2.0.0 was released on July 3, 2002, and
	represented the first time the synchronization became
	multithreaded and, to the best of my knowledge, the first
	multithreaded IMAP syncrhonizing application in existance.
	The last 2.0.x release, 2.0.8, was made on July 9.
      </para>
      <para>
	Version 3.0.0 was released on July 11, 2002, and introduced
	modular user interfaces and the first GUI interface for
	&OfflineIMAP;.  This manual also was introduced with 3.0.0,
	along with many command-line options.  Version 3.1.0 was
	released on July 21, adding the Noninteractive user
	interfaces, profiling support, and several bugfixes.  3.2.0
	was released on July 24, adding support for the Blinkenlights
	GUI interface.  &OfflineIMAP; entered maintenance mode for
	awhile, as it had reached a feature-complete milestone in my
	mind.
      </para>
      <para>
	The 3.99.x branch began in on October 7, 2002, to begin work
	for 4.0.  The Curses.Blinkenlights interface was added in
	3.99.6, and many architectural changes were made.
      </para>
      <para>
	4.0.0 was released on July 18, 2003, including the ability to
            synchronize directly between two IMAP servers, the first
            re-architecting of the configuration file to refine the
            notion of an account, and the new Curses interface.
      </para>
    </refsect1>
  </refentry>
</reference>

<!--
Local Variables:
mode: sgml
sgml-set-face: T
End:
-->
