#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 218
\textclass docbook-book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

pygopherd: A Multiprotocol Information Server
\layout FirstName

John
\layout Surname

Goerzen
\layout Date

$Date: 2002/04/06 03:25:26 $
\layout Part

Introduction
\layout Chapter

Welcome
\layout Standard

Welcome to pygopherd.
 In a nutshell, pygopherd is a modern dynamic multi-protocol hierarchical
 information server with a pluggable modularized extension system, full
 flexible caching, virtual files and folders, and autodetection of file
 types -- all with support for standardized yet extensible per-document
 metadata.
 Whew! Read on for information on this what all these buzzwords mean.
\layout Chapter

Features of pygopherd
\layout Section

Basic
\layout Standard

Pygopherd is designed to serve up files using the Gopher Internet protocol.
 With Gopher, you can mount a filesystem (viewing files and folders as if
 they were local), browse Gopherspace with a web browser, download files,
 and be interactive with searching.
\layout Standard

But this is only part of the story.
 The world of Gopher is more expansive than this.
 There are two major gopher protocols: Gopher0 (also known as RFC1436) and
 Gopher+.
 Gopher0 is a small, simple, lightweight protocol that is very functional
 yet also extremely easy to implement.
 Gopher0 clients can be easily places in small embedded devices or in massive
 environments like a modern web browser.
\layout Standard

Gopher+ is based on Gopher0 but extends it by providing document metadata
 such as file size and MIME type.
 Gopher+ allows all sorts of neat features, such as configurable metadata
 (serving up a bunch of photos? Add a Subject field to your metadata to
 let a customized photo browser display who is pictured) and multiple views
 of a file (let the user select to view your photos as PNG or JPEG).
\layout Standard

Pygopherd supports both.
\layout Standard

Pygopherd also fully natively supports HTTP, the protocol used on the Internet
 for most Web transactions.
 So, you can access a pygopherd server using anything from a small, 20-line
 client in mobile phone to a massive 50-MB web browser.
\layout Section

Modularity
\layout Standard

Pygopherd is designed in an extremely modular fashion.
 In fact, all protocols in pygopherd and all handlers are modules.
 You can easily select which modules to use and which to exclude, and the
 order in which they are tried.
 Protocol modules implement different ways of speaking to clients (HTTP,
 Gopher+, Gopher0) and handler modules implement different ways of handling
 data on the local machine (files, directories, links, mailboxes, etc.)
\layout Section

Feature list
\layout Standard

Here are some of pygopherd's features:
\layout Itemize

Runs on any platform supported by Python 2.2.
 This includes virtually every past and current flavor of Unix (Linux, *BSD,
 Solaris, SunOS), Windows, MacOS 9.x and 10.x, and more.
 Some features may not be available on non-Unix platforms, however.
\layout Itemize

Runs on any platform supported by Java 1.1 via the Jython Python implementation.
\layout Itemize

Tunable server types via configuration directive -- forking or threading.
\layout Itemize

Secure design with support for chrooted execution.
\layout Itemize

Feature-complete, full implementations of Gopher0 (RFC1436), Gopher+, and
 HTTP/1.0
\layout Itemize

Complete support Bucktooth-style gophermap files
\layout Itemize

Complete support for UMN-type .Links, .names, etc.
 files AND support for .cap files.
\layout Itemize

Support for automatically finding the titles of HTML documents for presentation
 in a directory.
\layout Itemize

Virtual folder support can present many different types of files as folders.
 Some examples are:
\begin_deeper 
\layout Itemize

Can present any Unix MBOX, MMDF box, MH directory, Maildir directory, or
 Babyl mailbox as a virtual folder, the contents of which are the messages
 in the mailbox.
\layout Itemize

Can use a configurable separator to split a file into multiple parts, the
 first line of each becoming the name for the virtual folder.
\end_deeper 
\layout Itemize

Versatile configuration file format is both extensible and nicely complementary
 of the module system.
\layout Itemize

Several options for running external programs to generate dynamic content:
 UMN-style execution, Bucktooth-style execution, or Pygopher PYG objects.
\layout Itemize

Protocol-independant, handler-dependant caching.
 This speeds up time by letting handlers cache dynamically-generated information
 -- currently used by the two directory handlers.
 This can improve performance of directories by several orders of magnitude.
 Because this is a handler cache only, all protocols can share the single
 cache -- and since the processing time of the protocols is negligable anyway,
 it works very well.
\layout Itemize

Autosensing of MIME types and gopher0 item types.
 Both are completely configurable.
 MIME type detection is done using a standard mime.types file, and gopher0
 types are calculated by using a configurable regexp-based MIME-to-gophertype
 map.
\layout Itemize

Heavy support of regular expressions in configuration.
\layout Itemize

ProtocolMultiplexer and HandlerMultiplexer let you choose only those protocols
 and handlers that you wish your server to support and the order in which
 they are tried when a request comes in.
\layout Itemize

Modular architecture permits rapid prototyping of new capabilities.
\layout Itemize

Full logging via syslog.
\layout Standard

fpp
\the_end
