.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "PYGOPHERD" "8" "24 August 2003" "John Goerzen" "PyGopherd Manual"

.SH NAME
PyGopherd \- Multiprotocol Information Server
.SH SYNOPSIS

\fBpygopherd\fR [ \fB\fIconfigfile\fB\fR ]

.SH "DESCRIPTION"
.PP
Welcome to \fBPyGopherd\fR.  In a nutshell, \fBPyGopherd\fR
is a modern dynamic
multi-protocol hierarchical information server with a pluggable
modularized extension system, 
full flexible caching, virtual files and
folders, and autodetection of file types -- all with support for
standardized yet extensible per-document metadata. Whew! Read on for
information on this what all these buzzwords mean.
.SS "FEATURES"
.PP
Here are some of \fBPyGopherd\fR's features:
.TP 0.2i
\(bu
Provides built-in support for multiple protocols:
HTTP (Web), Gopher+, Gopher (RFC1436), Enhanced Gopher0,
and WAP (mobile phones).  Protocols can be enabled or
disabled as desired.
.TP 0.2i
\(bu
Provides protocol autodetection.  That is,
\fBPyGopherd\fR can listen for all the above protocols
\fBon a single port\fR and will
automatically respond using the protocol it detects the
client is using.  Practical effects of this are that you
can, for instance, give out a single URL and have it
viewable normally on desktop Web browsers and in WAP
mode on mobile phones -- and appropriately in various
Gopher browsers.
.TP 0.2i
\(bu
Metadata and site links can be entered in a
variety of formats, including full UMN dotfile metadata
formats as well as Bucktooth gophermap files.  Moreover,
gophermap files are not limited to Gopher protocols, and
can be used for all protocols.
.TP 0.2i
\(bu
Support for inter-protocol linking (linking
from Gopher sites to web sites)
.TP 0.2i
\(bu
Virtual folder system lets you serve up
anything as if it were regular files and directories.
PyGopherd comes with the following virtual folder systems
built in:
.RS
.TP 0.2i
\(bu
Can present any Unix MBOX, MMDF box, MH
directory, Maildir directory, or Babyl mailbox as a
virtual folder, the contents of which are the
messages in the mailbox.
.TP 0.2i
\(bu
Can use a configurable separator to
split a file into multiple parts, the first line of each
becoming the name for the virtual folder.
.TP 0.2i
\(bu
Can peek inside a ZIP file and serve it
up as first-class site citizens -- metadata can even be
stored in the ZIP files.
.TP 0.2i
\(bu
Can serve up the contents of a dictd
server as a filesystem.
.RE
.TP 0.2i
\(bu
Modular, extensible design: you can use PyGopherd's own
PYG extension format, or UMN- or Bucktooth-style
executables.
.TP 0.2i
\(bu
Runs on any platform supported by Python 2.2 or 2.3.
This includes virtually every past and current flavor of
Unix (Linux, *BSD, Solaris, SunOS), Windows, MacOS 9.x
and X, and more.  Some features may not be available on
non-Unix platforms.
.TP 0.2i
\(bu
Runs on any platform supported by Java 1.1
via the Jython Python implementation.
.TP 0.2i
\(bu
Tunable server types via configuration
directive -- forking or threading.
.TP 0.2i
\(bu
Secure design with support for chrooted execution.
.TP 0.2i
\(bu
Feature-complete, full implementations of:
Gopher0 (RFC1435), Gopher+, HTTP, and WAP.
.TP 0.2i
\(bu
Support for automatically finding the titles
of HTML documents for presentation in a directory.
.TP 0.2i
\(bu
Versatile configuration file format is both
extensible and nicely complementary of the module system.
.TP 0.2i
\(bu
Protocol-independant, handler-dependant
caching.  This increases performance by letting handlers
cache dynamically-generated information -- currently used by
the directory handlers.  This can improve performance of
directories by several orders of magnitude.  Because this is
a handler cache only, all protococls share the single
cache.  Since the processing time for the protocols is
negligable, this works out very well.
.TP 0.2i
\(bu
Autosensing of MIME types and gopher0 item
types.  Both are completely configurable.  MIME type
detection is done using a standard mime.types file, and
gopher0 types are calculated by using a configurable
regexp-based MIME-to-gophertype map.
.TP 0.2i
\(bu
Heavy support of regular expressions in configuration.
.TP 0.2i
\(bu
ProtocolMultiplexer and HandlerMultiplexer
let you choose only those protocols and handlers that you
wish your server to support and the order in which they are
tried when a request comes in.
.TP 0.2i
\(bu
Full logging via syslog.
.SS "ABOUT GOPHER"
.PP
\fBPyGopherd\fR started life as a server for the Gopher Internet
protocol. With Gopher, you can mount a filesystem (viewing files and
folders as if they were local),
browse Gopherspace with a web browser,
download files, and be interactive with searching.
.PP
But this is only part of the story. The world of Gopher is more
expansive than this. There are two major gopher protocols: Gopher0
(also known as RFC1436) and Gopher+. Gopher0 is a small, simple,
lightweight protocol that is very functional yet also extremely easy
to implement. Gopher0 clients can be easily places in small embedded
devices or in massive environments like a modern web browser.
.PP
Gopher+ is based on Gopher0 but extends it by providing document
metadata such as file size and MIME type. Gopher+ allows all sorts of
neat features, such as configurable metadata (serving up a bunch of
photos? Add a Subject field to your metadata to let
a customized photo
browser display who is pictured) and multiple
views of a file (let the
user select to view your photos as PNG or JPEG).
.SH "QUICK START"
.PP
If you have already installed \fBPyGopherd\fR system-wide, or your
administrator has done that for you, your task for setting up
\fBPyGopherd\fR for the first time is quite simple.  You just need
to set up your configuration file, make your folder directory,
and run it!
.PP
You can quickly set up your configuration file.  The
distribution includes two files of interest:
\fIconf/pygopherd.conf\fR and
\fIconf/mime.types\fR.  Debian users will find
the configuration file pre-installed in
\fI/etc/pygopherd/pygopherd.conf\fR and the
\fImime.types\fR file provided by the system
already.
.PP
Open up \fIpygopherd.conf\fR in your editor and
adjust to suit.  The file is heavily commented and you can
refer to it for detailed information.  Some settings to take a
look at include: \fIdetach\fR,
\fIpidfile\fR, \fIport\fR, 
\fIusechroot\fR, \fIsetuid\fR,
\fIsetgid\fR, and \fIroot\fR.
These may or may not work at their defaults for you.  The
remaining ones should be fine for a basic setup.
.PP
Invoke \fBPyGopherd\fR with \fBpygopherd
path/to/configfile\fR (or
\fB/etc/init.d/pygopherd start\fR on Debian).
Place some files in the location specified by the
\fIroot\fR directive in the config file and
you're ready to run!
.SH "INSTALLATION"
.PP
If  you  are  reading this document via the "man" command, it is likely
that you have no installation tasks to perform; your system administra-
tor  has already installed \fBPyGopherd\fR.  If you need to install it yourself, you
have three options: a system-wide installation with Debian, system-wide
installation  with  other systems, and a single-user installation.  You
can    download    the    latest    version    of    PyGopherd
from
 <URL:http://quux.org/devel/gopher/pygopherd/>
.SS "DEBIAN SYSTEM-WIDE INSTALLATION"
.PP
If you are tracking Debian unstable, you may install
\fBPyGopherd\fR by simply running this command as root:
.PP
\fBapt-get install pygopherd\fR
.PP
If you are not tracking Debian unstable, download the .deb
package from the \fBPyGopherd\fR website and then run
\fBdpkg -i\fR to install the downloaded
package.  Then, skip to the configuration section below.
You will use \fB/etc/init.d/pygopherd start\fR
to start the program.
.SS "OTHER SYSTEM-WIDE INSTALLATION"
.PP
Download the tar.gz version of the package from the website.  Make
sure you have Python 2.2 or above installed; if now, download and
install it from  <URL:http://www.python.org/>.  Then run these
commands:

.nf
	  \fBtar -zxvf pygopherd-x.y.z.tar.gz\fR
	  \fBcd pygopherd-x.y.z\fR
	  \fBpython2.2 setup.py\fR
	
.fi
.PP
Some systems will use \fBpython\fR or
\fBpython2.3\fR in place of
\fBpython2.2\fR.
.PP
Next, proceed to configuration.  Make sure that the
\fI/etc/pygopherd/pygopherd.conf\fR file
names valid users (\fIsetuid\fR and
\fIsetgid\fR options) and a valid document
root (\fIroot\fR option).
.PP
You will type \fIpygopherd\fR to invoke the
program.
.SS "SINGLE-ACCOUNT INSTALLATION"
.PP
Download the tar.gz version of the package from the website.  Make
sure you have Python 2.2 or above installed; if now, download and
install it from  <URL:http://www.python.org/>.  Then run these
commands:

.nf
	  \fBtar -zxvf pygopherd-z.y.z.tar.gz\fR
	  \fBcd pygopherd-x.y.z\fR
	
.fi
.PP
Modify \fIconf/pygopherd.conf\fR as follows:
.TP 0.2i
\(bu
Set \fIusechroot = no\fR
.TP 0.2i
\(bu
Comment out (add a # sign to the start of
the line) the \fIpidfile\fR,
\fIsetuid\fR, and
\fIsetgid\fR lines.
.TP 0.2i
\(bu
Set \fIroot\fR to osomething appropriate.
.TP 0.2i
\(bu
Set \fIport\fR to a number
greater than 1024.
.PP
When you want to run \fBPyGopherd\fR, you will issue the
\fBcd\fR command as above and then type
\fBPYTHONPATH=. bin/pygopherd\fR.  There is no
installation step necessary.
.SH "CONFIGURATION"
.PP
\fBPyGopherd\fR is regulated by a configuratoin file normally
stored in \fI/etc/pygopherd/pygopherd.conf\fR.
You can specify an alternate configuration file on the command
line.  The \fBPyGopherd\fR distribution ships
with a sample \fIpygopherd.conf\fR file that
thoroughly documents the configuration file options and
settings.
.SH "OPTIONS"
.PP
All \fBPyGopherd\fR configuratoin is done via the configuration
file.  Therefore, the program has only one command-line
option:
.TP
\fB\fIconfigfile\fB\fR
This option argument specifies the location
of the configuration file that \fBPyGopherd\fR is to use.
.SH "HANDLERS"
.PP
\fBPyGopherd\fR defines several handlers which are responsible for
finding data on your server and presenting it to the user.  The
handlers are used to generate things like links to other documents and
directory listings.  They are also responsible for serving up regular
files and even virtual folders.
.PP
Handlers are specified with the \fIhandlers\fR
option in \fIpygopherd.conf\fR.  This option is
a list of handlers to use.  For each request that arrives,
\fBPyGopherd\fR will ask each handler in
turn whether or not it can handle the request, and will handle the
request according to the first handler that is capable of doing so.
If no handlers can handle the request, a file not found error is
generated.  See the example configuration file for an example.
.PP
The remaining parts of this section describe the different
handlers that ship with \fBPyGopherd\fR.
.TP
\fBdir.DirHandler\fR
This handler is a basic one that generates menus based
on the contents of a directory.  It is used for
directories that contain neither a
\fIgophermap\fR file nor UMN-style links
files, or situations where you have no need for either
of those.

This handler simply
reads the contents of your on-disk directory, determines the
appropriate types of each file, and sends the result to the client.
The descriptions of each item are usually set to the filename, but the
\fIhtml.HTMLFileTitleHandler\fR may
override that.
.TP
\fBgophermap.BuckGophermapHandler\fR
This handler is used to generate directory listings
based on \fIgophermap\fR files.  It will
not read the directory on-disk, instead serving content
from the \fIgophermap\fR file only.
Gophermaps are useful if you want to present a directory
in which the files do not frequently change and there is
general information to present.  Overall, if you only
wish to present information particular to certain files,
you should consider using the abstract feature of
UMN.UMNDirHandler.

The \fIgophermap\fR files contain two
types of lines, which are described here using the same
convention normally used for command line arguments.  In
this section, the symbol \\t will be used to indicate a
tab character, Control-I.

 \fB\fIfull line of informational
text\fB\fR


 \fB\fIgophertypeDESCRIPTION\fB\fR [ \fB\\t\fIselector\fB [ \\t\fIhost\fB [ \\t\fIport\fB ] ]\fR ]


Foo
.SH "EXAMPLES"
.PP
Here are some example configurations for various situations.
Please e-mail any other examples you have that may be useful to
me.
.SS "MULTIPLE ACCOUNTS WITH MUTT"
.PP
This example shows you how to set up \fBOfflineIMAP\fR to
synchronize multiple accounts with the mutt mail reader.
.PP
Start by creating a directory to hold your folders by running
\fBmkdir ~/Mail\fR.  Then, in your
\fI~/.offlineimaprc\fR, specify:

.nf
accounts = Personal, Work
.fi
.PP
Make sure that you have both an
\fI[Account Personal]\fR
and an \fI[Account Work]\fR section.  The
local repository for each account must have different
\fIlocalfolder\fR path names.
Also, make sure
to enable \fI[mbnames]\fR.
.PP
In each local repository section, write something like this:

.nf
localfolders = ~/Mail/Personal
.fi
.PP
Finally, add these lines to your \fI~/.muttrc\fR:

.nf
source ~/path-to-mbnames-muttrc-mailboxes
folder-hook Personal set from="youremail@personal.com"
folder-hook Work set from="youremail@work.com"
set mbox_type=Maildir
set folder=$HOME/Mail
spoolfile=+Personal/INBOX
.fi
.PP
That's it!
.SS "UW-IMAPD AND REFERENCES"
.PP
Some users with a UW-IMAPD server need to use \fBOfflineIMAP\fR's
"reference" feature to get at their mailboxes, specifying a reference
of "~/Mail" or "#mh/" depending on the configuration.  The below
configuration from (originally from docwhat@gerf.org)
shows using a \fIreference\fR of Mail, a \fInametrans\fR
that strips
the leading Mail/ off incoming folder names, and a
\fIfolderfilter\fR that
limits the folders synced to just three.

.nf
[Account Gerf]
localrepository = GerfLocal
remoterepository = GerfRemote

[Repository GerfLocal]
type = Maildir
localfolders = ~/Mail

[Repository GerfRemote]
type = IMAP
remotehost = gerf.org
ssl = yes
remoteuser = docwhat
reference = Mail
# Trims off the preceeding Mail on all the folder names.
nametrans = lambda foldername: \\
            re.sub('^Mail/', '', foldername)
# Yeah, you have to mention the Mail dir, even though it
# would seem intuitive that reference would trim it.
folderfilter = lambda foldername: foldername in [
      'Mail/INBOX',
      'Mail/list/zaurus-general',
      'Mail/list/zaurus-dev',
      ]
maxconnections = 1
holdconnectionopen = no
.fi
.SS "PYTHONFILE CONFIGURATION FILE OPTION"
.PP
You can have \fBOfflineIMAP\fR
load up a Python file before evaluating the
configuration file options that are Python expressions.  This example
is based on one supplied by Tommi Virtanen for this feature.
.PP
In \fI~/.offlineimap.rc\fR, he adds these options:

.nf
[general]
pythonfile=~/.offlineimap.py
[Repository foo]
foldersort=mycmp
.fi
.PP
Then, the \fI~/.offlineimap.py\fR file will
contain:

.nf
prioritized = ['INBOX', 'personal', 'announce', 'list']

def mycmp(x, y):
   for prefix in prioritized:
       if x.startswith(prefix):
           return -1
       elif y.startswith(prefix):
           return +1
   return cmp(x, y)

def test_mycmp():
   import os, os.path
   folders=os.listdir(os.path.expanduser('~/data/mail/tv@hq.yok.utu.fi'))
   folders.sort(mycmp)
   print folders
.fi
.PP
This code snippet illustrates how the \fIfoldersort\fR
option can be customized with a Python function from the
\fIpythonfile\fR to always synchronize certain
folders first.
.SH "ERRORS"
.PP
If you get one of some frequently-encountered or confusing errors,
please check this section.
.SS "UID VALIDITY PROBLEM FOR FOLDER"
.PP
IMAP servers use a unique ID (UID) to refer to a specific message.
This number is guaranteed to be unique to a particular message
\fBforever\fR.
No other message in the same folder will ever get the same
UID.  UIDs are an integral part of \fBOfflineIMAP\fR's synchronization
scheme; they are used to match up messages on your computer to
messages on the server.
.PP
Sometimes, the UIDs on the server might get reset.  Usually this will
happen if you delete and then recreate a folder.  When you create a
folder, the server will often start the UID back from 1.  But
\fBOfflineIMAP\fR might still have the UIDs from the previous folder by the
same name stored.  \fBOfflineIMAP\fR will detect this condition and skip the
folder.  This is GOOD, because it prevents data loss.
.PP
You can fix it by removing your local folder and cache data.  For
instance, if your folders are under \fI~/Folders\fR
and the folder with the problem is INBOX, you'd type this:

.nf
rm -r ~/Folders/INBOX
rm -r ~/.offlineimap/Account-\fIAccountName\fR
rm -r ~/.offlineimap/Repository-\fIRepositoryName\fR
.fi
.PP
(Of course, replace AccountName and RepositoryName 
with the names as specified
in \fI~/.offlineimaprc\fR).
.PP
Next time you run \fBOfflineIMAP\fR, it will re-download
the folder with the
new UIDs.  Note that the procedure specified above will lose any local
changes made to the folder.
.PP
Some IMAP servers are broken and do not support UIDs properly.  If you
continue to get this error for all your folders even after performing
the above procedure, it is likely that your IMAP server falls into
this category.  \fBOfflineIMAP\fR is incompatible with such servers.
Using \fBOfflineIMAP\fR with them will not destroy any mail, but at the same time,
it will not actually synchronize it either.  (\fBOfflineIMAP\fR will detect
this condition and abort prior to synchronization.)
.PP
This question comes up frequently on the
\fBOfflineIMAP\fR
mailing list <URL:http://lists.complete.org/offlineimap@complete.org/>.  You can find a
detailed
discussion <URL:http://lists.complete.org/offlineimap@complete.org/2003/04/msg00012.html.gz> of the problem there.
.SH "OTHER FREQUENTLY ASKED QUESTIONS"
.PP
There are some other FAQs that might not fit into another section
of the document, so they are discussed here.
.TP
\fBWhat platforms does OfflineIMAP run on?\fR
It should run on most platforms supported by Python, which are quite a
few.
.TP
\fBI'm using Mutt.  Other IMAP sync programs require me to use "set maildir_trash=yes".  Do I need to do that with OfflineIMAP?\fR
No.  \fBOfflineIMAP\fR is smart enough to figure out message deletion without this extra
crutch.  You'll get the best results if you don't use this setting, in
fact.
.TP
\fBI've upgraded and now OfflineIMAP crashes when I start it up!  Why?\fR
You need to upgrade your configuration
file.  See [XRef to UPGRADING.4.0] at the end of this
manual.
.TP
\fBHow do I specify the names of my folders?\fR
You do not need to.  \fBOfflineIMAP\fR is smart
enough to automatically figure out what folders are present
on the IMAP server and synchronize them.  You can use the
\fIfolderfilter\fR and \fIfoldertrans\fR
configuration file options to request certain folders and rename them
as they come in if you like.
.TP
\fBHow can I prevent certain folders from being synced?\fR
Use the \fIfolderfilter\fR option in the configuration file.
.TP
\fBHow can I add or delete a folder?\fR
\fBOfflineIMAP\fR does not currently provide this feature, but if you create a new
folder on the IMAP server, it will be created locally automatically.
.TP
\fBAre there any other warnings that I should be aware of?\fR
Yes; see the Notes section below.
.TP
\fBWhat is the mailbox name recorder (mbnames) for?\fR
Some mail readers, such as Mutt, are not capable
of automatically determining the names of your mailboxes.
\fBOfflineIMAP\fR can help these programs by writing the names
of the folders ni a format you specify.  See the example
\fIofflineimap.conf\fR for details.
.TP
\fBCan I synchronize multiple accounts with OfflineIMAP?\fR
Sure.  Just name them all in the
\fIaccounts\fR line in the \fIgeneral\fR
section of the configuration file, and add a per-account section
for each one.
.TP
\fBDoes OfflineIMAP support POP?\fR
No.  POP is not robust enough to do a completely reliable
multi-machine synchronization like \fBOfflineIMAP\fR can do.  \fBOfflineIMAP\fR
will not support it.
.TP
\fBDoes OfflineIMAP support mailbox formats other than Maildir?\fR
Not at present.  There is no technical reason not to; just no
demand yet.  Maildir is a superior format anyway.
However, \fBOfflineIMAP\fR can sync between two IMAP
servers, and some IMAP servers support other formats.  You
could install an IMAP server on your local machine and have
\fBOfflineIMAP\fR sync to that.
.TP
\fB[technical] Why are your Maildir message filenames so huge?\fR
\fBOfflineIMAP\fR has two relevant principles: 1) never modifying your
messages in any way and 2) ensuring 100% reliable synchronizations.
In order to do a reliable sync, \fBOfflineIMAP\fR
must have a way to
uniquely identify each e-mail.  Three pieces of information are
required to do this: your account name, the folder name, and the
message UID.  The account name can be calculated from the path in
which your messages are.  The folder name can usually be as well, BUT
some mail clients move messages between folders by simply moving the
file, leaving the name intact.

So, \fBOfflineIMAP\fR must store both a UID folder ID.  The folder ID is
necessary so \fBOfflineIMAP\fR can detect a message moved to a different
folder.  \fBOfflineIMAP\fR stores the UID (U= number) and an md5sum of the
foldername (FMD5= number) to facilitate this.
.TP
\fBWhat is the speed of OfflineIMAP's sync?\fR
OfflineIMAP
versions 2.0 and above contain a multithreaded system.  A good way to
experiment is by setting \fImaxsyncaccounts\fR to 3 and \fImaxconnections\fR to 3
in each account clause.

This lets OfflineIMAP open up multiple connections simultaneously.
That will let it process multiple folders and messages at once.  In
most cases, this will increase performance of the sync.

Don't set the number too high.  If you do that, things might actually
slow down as your link gets saturated.  Also, too many connections can
cause mail servers to have excessive load.  Administrators might take
unkindly to this, and the server might bog down.  There are many
variables in the optimal setting; experimentation may help.

An informal benchmark yields these results for my setup:
.RS
.TP 0.2i
\(bu
10 minutes with MacOS X Mail.app "manual cache"
.TP 0.2i
\(bu
5 minutes with GNUS agent sync
.TP 0.2i
\(bu
20 seconds with OfflineIMAP 1.x
.TP 0.2i
\(bu
9 seconds with OfflineIMAP 2.x
.TP 0.2i
\(bu
3 seconds with OfflineIMAP 3.x "cold start"
.TP 0.2i
\(bu
2 seconds with OfflineIMAP 3.x "held connection"
.RE
.SH "CONFORMING TO"
.TP 0.2i
\(bu
Internet Message Access Protocol version 4rev1 (IMAP 4rev1) as
specified in RFC2060 and RFC3501
.TP 0.2i
\(bu
CRAM-MD5 as specified in RFC2195
.TP 0.2i
\(bu
Maildir as specified in
the Maildir manpage <URL:http://www.qmail.org/qmail-manual-html/man5/maildir.html> and
the qmail website <URL:http://cr.yp.to/proto/maildir.html>.
.TP 0.2i
\(bu
Standard Python 2.2.1 as implemented on POSIX-compliant systems.
.SH "NOTES"
.SS "DELETING LOCAL FOLDERS"
.PP
\fBOfflineIMAP\fR does a two-way synchronization.  That is, if you
make a change to the mail on the server, it will be propogated to your
local copy, and vise-versa.  Some people might think that it would be
wise to just delete all their local mail folders periodically.  If you
do this with \fBOfflineIMAP\fR, remember to also remove your local status
cache (\fI~/.offlineimap\fR by default).  Otherwise, \fBOfflineIMAP\fR will take
this as an intentional deletion of many messages and will interpret
your action as requesting them to be deleted from the server as well.
(If you don't understand this, don't worry; you probably won't
encounter this situation)
.SS "MULTIPLE INSTANCES"
.PP
\fBOfflineIMAP\fR is not designed to have several instances (for instance, a cron job and an interactive invocation) run over the same
mailbox simultaneously.  It will perform a check on startup and
abort if another \fBOfflineIMAP\fR is already running.  If you need
to schedule synchronizations, please use the
\fIautorefresh\fR settings rather than cron.
Alternatively, you can set a separate \fImetadata\fR
directory for each instance.
.SS "COPYING MESSAGES BETWEEN FOLDERS"
.PP
Normally, when you copy a message between folders or add a new message
to a folder locally, \fBOfflineIMAP\fR
will just do the right thing.  However, sometimes this can be tricky
-- if your IMAP server does not provide the SEARCH command, or does
not return something useful, \fBOfflineIMAP\fR
cannot determine the new UID of the message.  So, in these rare
instances, OfflineIMAP will upload the message to the IMAP server and
delete it from your local folder.  Then, on your next sync, the
message will be re-downloaded with the proper UID.
\fBOfflineIMAP\fR makes sure that the message was properly uploaded before deleting it,
so there should be no risk of data loss.
.SS "USE WITH EVOLUTION"
.PP
\fBOfflineIMAP\fR can work with Evolution.  To do so, first configure
your \fBOfflineIMAP\fR account to have
\fBsep = /\fR in its configuration.  Then, configure
Evolution with the
"Maildir-format mail directories" server type.  For the path, you will need to
specify the name of the top-level folder
\fBinside\fR your \fBOfflineIMAP\fR storage location.
You're now set!
.SS "USE WITH KMAIL"
.PP
At this time, I believe that \fBOfflineIMAP\fR with Maildirs
is not compatible
with KMail.  KMail cannot work in any mode other than to move
all messages out of all folders immediately, which (besides being annoying
and fundamentally broken) is incompatible with
\fBOfflineIMAP\fR.
.PP
However, I have made KMail version 3 work well with
\fBOfflineIMAP\fR by installing an IMAP server on my local
machine, having \fBOfflineIMAP\fR sync to that, and pointing
KMail at the same server.
.SS "MAILING LIST"
.PP
There is an OfflineIMAP mailing list available.
To subscribe, send the text "Subscribe" in the subject of a mail to
offlineimap-request@complete.org.  To post, send the message to
offlineimap@complete.org.  Archives are available at
 <URL:http://lists.complete.org/offlineimap@complete.org/>.
.SS "BUGS"
.PP
Reports of bugs should be sent via e-mail to the
\fBOfflineIMAP\fR bug-tracking system (BTS) at
offlineimap@bugs.complete.org or submitted online using
the web interface <URL:http://bugs.complete.org/>.
.PP
The Web site also lists all current bugs, where you can check their
status or contribute to fixing them.
.SH "UPGRADING TO 4.0"
.PP
If you are upgrading from a version of \fBOfflineIMAP\fR prior to
3.99.12, you will find that you will get errors when
\fBOfflineIMAP\fR starts up (relating to ConfigParser or
AccountHashGenerator) and the
configuration file.  This is because the config file format
had to change to accomodate new features in 4.0.  Fortunately,
it's not difficult to adjust it to suit.
.PP
First thing you need to do is stop any running \fBOfflineIMAP\fR
instance, making sure first that it's synced all your mail.
Then, modify your
\fI~/.offlineimaprc\fR file.  You'll need to
split up each account section (make sure that it now starts
with "Account ") into two Repository sections (one for the
local side and another for the remote side.)  See the files
\fIofflineimap.conf.minimal\fR and
\fIofflineimap.conf\fR in the distribution if
you need more assistance.
.PP
\fBOfflineIMAP\fR's status directory area has also changed.
Therefore, you should delete everything in ~/.offlineimap as
well as your local mail folders.
.PP
When you start up \fBOfflineIMAP\fR 4.0, it will re-download all
your mail from the server and then you can continue using it
like normal.
.SH "COPYRIGHT"
.PP
OfflineIMAP, and this manual, are Copyright (C) 2002, 2003 John Goerzen.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
.PP
imaplib.py comes from the Python dev tree and is licensed under
the GPL-compatible PSF license as stated in the file
\fICOPYRIGHT\fR in the \fBOfflineIMAP\fR
distribution.
.SH "AUTHOR"
.PP
\fBOfflineIMAP\fR, its libraries, documentation, and all included files, except where
noted, was written by John Goerzen <jgoerzen@complete.org> and
copyright is held as stated in the COPYRIGHT section.
.PP
\fBOfflineIMAP\fR may be downloaded, and information found, from its
homepage via either Gopher <URL:gopher://quux.org/1/devel/offlineimap>
or HTTP <URL:http://quux.org/devel/offlineimap>.
.PP
\fBOfflineIMAP\fR may also be downloaded using Subversion.  Additionally,
the distributed tar.gz may be updated with a simple "svn update"
command; it is ready to go.  For information on getting OfflineIMAP
with Subversion, please visit the
complete.org Subversion page <URL:http://svn.complete.org/>.
.SH "SEE ALSO"
.PP
\fBmutt\fR(1),
\fBpython\fR(1)
.SH "HISTORY"
.PP
Detailed history may be found in the file ChangeLog in the
\fBOfflineIMAP\fR distribution.  Feature and bug histories may be
found in the file debian/changelog which, despite its name, is
not really Debian-specific.  This section provides a large
overview.
.PP
Development on \fBOfflineIMAP\fR began on June 18, 2002.  Version
1.0.0 was released three days later on June 21, 2002.  Point
releases followed, including speed optimizations and some
compatibility fixes.
.PP
Version 2.0.0 was released on July 3, 2002, and
represented the first time the synchronization became
multithreaded and, to the best of my knowledge, the first
multithreaded IMAP syncrhonizing application in existance.
The last 2.0.x release, 2.0.8, was made on July 9.
.PP
Version 3.0.0 was released on July 11, 2002, and introduced
modular user interfaces and the first GUI interface for
\fBOfflineIMAP\fR.  This manual also was introduced with 3.0.0,
along with many command-line options.  Version 3.1.0 was
released on July 21, adding the Noninteractive user
interfaces, profiling support, and several bugfixes.  3.2.0
was released on July 24, adding support for the Blinkenlights
GUI interface.  \fBOfflineIMAP\fR entered maintenance mode for
awhile, as it had reached a feature-complete milestone in my
mind.
.PP
The 3.99.x branch began in on October 7, 2002, to begin work
for 4.0.  The Curses.Blinkenlights interface was added in
3.99.6, and many architectural changes were made.
.PP
4.0.0 was released on July 18, 2003, including the ability to
synchronize directly between two IMAP servers, the first
re-architecting of the configuration file to refine the
notion of an account, and the new Curses interface.
